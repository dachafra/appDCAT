var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/// <reference path="../typings/tstl.d.ts" />
eval('var std = require("./tstl")');
var test;
(function (test) {
    function main() {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _i, key;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, std.sleep_for(0)];
                    case 1:
                        _c.sent();
                        console.log("TEST ALL");
                        _a = [];
                        for (_b in test)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 2;
                    case 2:
                        if (!(_i < _a.length)) return [3 /*break*/, 5];
                        key = _a[_i];
                        if (key.indexOf("test_") != 0)
                            return [3 /*break*/, 4];
                        console.log(key);
                        return [4 /*yield*/, test[key]()];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    test.main = main;
})(test || (test = {}));
test.main().then(function () {
    console.log("No error has detected.");
}).catch(function (error) {
    console.log(error);
    throw error;
});
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_binary_searches() {
        _Test_binary_search_of_atom();
        _Test_binary_search_of_pair();
    }
    test.test_binary_searches = test_binary_searches;
    function _Test_binary_search_of_atom() {
        var vec = new std.Vector();
        var set = new std.TreeMultiSet();
        //----
        // FILL VALUES
        //----
        // INSERT ELEMENTS
        for (var i = 0; i < 100; ++i) {
            var val = Math.random();
            vec.push_back(val);
            set.insert(val);
        }
        // SORT VECTOR
        std.sort(vec.begin(), vec.end());
        //----
        // VALIDATE
        //----
        for (var i = 0; i < 10000; ++i) {
            var val = Math.random();
            var v_it = std.equal_range(vec.begin(), vec.end(), val);
            var s_it = set.equal_range(val);
            // VALIDATE LOWER BOUND
            if (v_it.first.equals(vec.end()) == true)
                if (s_it.first.equals(set.end()) == false)
                    throw new std.DomainError("Error std.lower_bound or Set.lower_bound; someone is out bound but the other is not.");
                else
                    continue;
            else if (v_it.first.value != s_it.first.value)
                throw new std.DomainError("Error std.lower_bound or Set.lower_bound; different value.");
            // VALIDATE UPPER BOUND
            if (v_it.second.equals(vec.end()) == true)
                if (s_it.second.equals(set.end()) == false)
                    throw new std.DomainError("Error std.upper_bound or Set.upper_bound; someone is out bound but the other is not.");
                else
                    continue;
            else if (v_it.second.value != s_it.second.value)
                throw new std.DomainError("Error std.upper_bound or Set.upper_bound; different value.");
        }
    }
    function _Test_binary_search_of_pair() {
        var vec = new std.Vector();
        var map = new std.TreeMultiMap();
        //----
        // FILL VALUES
        //----
        // INSERT ELEMENTS
        for (var i = 0; i < 100; ++i) {
            var pair = std.make_pair(Math.random(), 0);
            vec.push_back(pair);
            map.insert(pair);
        }
        // SORT VECTOR
        std.sort(vec.begin(), vec.end(), _Compare_numbers_pair);
        //----
        // VALIDATE
        //----
        for (var i = 0; i < 10000; ++i) {
            var pair = std.make_pair(Math.random(), 0);
            var v_it = std.equal_range(vec.begin(), vec.end(), pair, _Compare_numbers_pair);
            var m_it = map.equal_range(pair.first);
            // VALIDATE LOWER BOUND
            if (v_it.first.equals(vec.end()) == true)
                if (m_it.first.equals(map.end()) == false)
                    throw new std.DomainError("Error std.lower_bound or Set.lower_bound; someone is out bound but the other is not.");
                else
                    continue;
            else if (v_it.first.value.first != m_it.first.first)
                throw new std.DomainError("Error std.lower_bound or Set.lower_bound; different value.");
            // VALIDATE UPPER BOUND
            if (v_it.second.equals(vec.end()) == true)
                if (m_it.second.equals(map.end()) == false)
                    throw new std.DomainError("Error std.upper_bound or Set.upper_bound; someone is out bound but the other is not.");
                else
                    continue;
            else if (v_it.second.value.first != m_it.second.first)
                throw new std.DomainError("Error std.upper_bound or Set.upper_bound; different value.");
        }
    }
    function _Compare_numbers_pair(x, y) {
        return x.first < y.first;
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    var HEAP_SZE = 8000;
    var SIZE = 10000;
    // NEED TO MODIFY HERE
    function test_heaps() {
        var items = new std.Vector();
        for (var i = 0; i < SIZE; ++i)
            items.push_back(Math.random());
        var first = items.begin();
        var last = items.begin().advance(HEAP_SZE);
        std.sort_heap(first, last);
        if (std.is_sorted(first, last) == false)
            throw new std.DomainError("Error on heaps of algorithms.");
    }
    test.test_heaps = test_heaps;
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    var SIZE = 1000;
    var MID = 561;
    function test_iterations() {
        _Test_for_of_iterations();
        _Test_union_of_iterations();
        _Test_equals();
        _Test_mismatch();
        _Test_count();
    }
    test.test_iterations = test_iterations;
    function _Test_for_of_iterations() {
        var items = new std.Vector();
        items.assign(1000, 1.5);
        var sum = 0;
        var fn = function (val) {
            sum += val;
        };
        std.for_each(items.begin(), items.end(), fn);
        std.for_each_n(items.begin(), items.size(), fn);
        if (sum != 1.5 * 1000 * 2)
            throw new std.DomainError("Error on std.for_each() or std.for_each_n().");
    }
    function _Test_union_of_iterations() {
        var items = new std.Vector([2, 3, 4]);
        var flags = new std.Vector([
            std.all_of(items.begin(), items.end(), function (val) {
                return val > 1.0;
            }),
            std.any_of(items.begin(), items.end(), function (val) {
                return val == 2.0;
            }),
            std.none_of(items.begin(), items.end(), function (val) {
                return val != Math.floor(val);
            })
        ]);
        var ret = std.all_of(flags.begin(), flags.end(), function (flag) {
            return flag;
        });
        if (ret == false)
            throw new std.DomainError("Error on one of them: all_of | any_of | none_of.");
    }
    function _Test_equals() {
        var v1 = new std.Vector();
        var v2 = new std.Vector();
        for (var i = 0; i < SIZE; ++i)
            v1.push_back(Math.random());
        v2.assign(v1.begin(), v1.end());
        for (var i = MID; i < SIZE; ++i)
            v2.set(i, v2.at(i) * 100.0);
        if (std.equal(v1.begin(), v1.begin().advance(MID), v2.begin()) == false)
            throw new std.DomainError("Error on std.equal(); true -> false");
        else if (std.equal(v1.begin(), v1.end(), v2.begin()) == true)
            throw new std.DomainError("Error on std.equal(); false -> true");
    }
    function _Test_lexicographical_compare() {
        var v1 = new std.Vector([1, 1, 2, 3]);
        var v2 = new std.Vector([1, 1, 3, 3]);
        if (std.lexicographical_compare(v1.begin(), v1.end(), v2.begin(), v2.end()) == false)
            throw new std.DomainError("Error on lexicographical_compare().");
    }
    function _Test_mismatch() {
        var v1 = new std.Vector();
        var v2 = new std.Vector();
        for (var i = 0; i < SIZE; ++i)
            v1.push_back(Math.random());
        v2.assign(v1.begin(), v1.end());
        v2.set(MID, -90);
        var pair = std.mismatch(v1.begin(), v1.end(), v2.begin());
        if (pair.first.index() != pair.second.index() || pair.first.index() != MID)
            throw new std.DomainError("Error on std.mismatch().");
    }
    function _Test_count() {
        var v = new std.Vector();
        for (var i = 0; i < SIZE; ++i)
            v.push_back(Math.random());
        var fn = function (val) {
            return val >= .5;
        };
        var cnt = 0;
        try {
            for (var v_1 = __values(v), v_1_1 = v_1.next(); !v_1_1.done; v_1_1 = v_1.next()) {
                var val = v_1_1.value;
                if (fn(val) == true)
                    ++cnt;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (v_1_1 && !v_1_1.done && (_a = v_1.return)) _a.call(v_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (std.count_if(v.begin(), v.end(), fn) != cnt)
            throw new std.DomainError("Error on std.count_if().");
        var e_1, _a;
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_mathmatics() {
        _Test_min_max();
        _Test_permutations();
    }
    test.test_mathmatics = test_mathmatics;
    function _Test_min_max() {
        var v = new std.Vector();
        for (var i = 0; i < 1000; ++i)
            v.push_back(Math.random());
        var pair = std.minmax_element(v.begin(), v.end());
        var min = Math.min.apply(Math, __spread(v.data()));
        var max = Math.max.apply(Math, __spread(v.data()));
        if (min != pair.first.value || max != pair.second.value)
            throw new std.DomainError("Error on std.minmax_element().");
    }
    function _Test_permutations() {
        var x = new std.Vector([0, 1, 2, 3]);
        var y = new std.Vector([3, 2, 1, 0]);
        if (std.is_permutation(x.begin(), x.end(), y.begin()) == false)
            throw new std.DomainError("Error on std.is_permutation().");
        // NEXT_PERMUTATION
        var cnt = 1;
        while (std.next_permutation(x.begin(), x.end()) == true)
            ++cnt;
        if (cnt != 4 * 3 * 2)
            throw new std.DomainError("Error on std.next_permutation().");
        // PREV_PERMUTATION
        cnt = 1;
        while (std.prev_permutation(y.begin(), y.end()) == true)
            ++cnt;
        if (cnt != 4 * 3 * 2)
            throw new std.DomainError("Error on std.prev_permutation().");
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_modifiers() {
        _Test_removes();
        _Test_replaces();
        _Test_uniques();
        _Test_rotate();
        _Test_shuffles();
    }
    test.test_modifiers = test_modifiers;
    function _Test_removes() {
        var v = _Create_sample();
        std.remove(v.begin(), v.end(), 2);
        var it = std.find(v.begin(), v.end(), 2);
        if (it.equals(v.end()) == false)
            throw new std.DomainError("Error on std.remove().");
    }
    function _Test_replaces() {
        var v = _Create_sample();
        std.replace(v.begin(), v.end(), 2, 4);
        var it = std.find(v.begin(), v.end(), 2);
        if (it.equals(v.end()) == false)
            throw new std.DomainError("Error on std.replace().");
    }
    function _Test_uniques() {
        var l = new std.List();
        for (var i = 0; i < 1000; ++i)
            l.push_back(Math.floor(Math.random() * 50));
        l.sort();
        var v = new std.Vector(l.begin(), l.end());
        l.unique();
        std.unique(v.begin(), v.end());
        if (std.equal(v.begin(), v.end(), l.begin()) == false)
            throw new std.DomainError("Error on std.unique().");
    }
    function _Test_rotate() {
        var x = new std.Vector([0, 1, 2, 3, 4, 5]);
        var y = new std.Vector([3, 4, 5, 0, 1, 2]);
        std.rotate(x.begin(), x.begin().advance(3), x.end());
        if (std.equal(x.begin(), x.end(), y.begin()) == false)
            throw new std.DomainError("Error on std.rotate().");
    }
    function _Test_shuffles() {
        var v = new std.Vector();
        for (var i = 0; i < 1000; ++i)
            v.push_back(Math.floor(Math.random() * 50));
        std.shuffle(v.begin(), v.end());
        std.random_shuffle(v.begin(), v.end());
    }
    function _Create_sample() {
        return new std.Vector([1, 2, 2, 3, 3, 3]);
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_partitions() {
        var v = new std.Vector();
        for (var i = 0; i < 1000; ++i)
            v.push_back(i);
        std.partition(v.begin(), v.end(), _Pred);
        if (std.all_of(v.begin(), v.begin().advance(500), _Pred) == false)
            throw new std.DomainError("Error on std.partition().");
        else if (std.is_partitioned(v.begin(), v.end(), _Pred) == false)
            throw new std.DomainError("Error on std.is_partitioned().");
    }
    test.test_partitions = test_partitions;
    function _Pred(val) {
        return val < 500;
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_sortings() {
        _Test_atomic_sorting();
        _Test_object_sorting();
    }
    test.test_sortings = test_sortings;
    function _Test_atomic_sorting() {
        var array = new Array();
        for (var i = 1; i <= 15; i++)
            for (var j = 0; j < 3; j++)
                array.push(i);
        std.shuffle(std.begin(array), std.end(array));
        std.stable_sort(std.begin(array), std.end(array));
        if (std.is_sorted(std.begin(array), std.end(array)) == false)
            throw new std.DomainError("Wrong sorting in atoms.");
    }
    function _Test_object_sorting() {
        //----
        // CONSTRUCT ITEMS
        //----
        var cubes = new std.Deque();
        for (var i = 0; i < 20; i++)
            cubes.push_back(new test.Cube());
        //----
        // SORT BY Cube.less()
        //----
        // DO SORT
        std.sort(cubes.begin(), cubes.end());
        // VALIDATION
        if (std.is_sorted(cubes.begin(), cubes.end()) == false)
            throw new std.DomainError("Wrong sorting in objects.");
        //----
        // SORT BY inline function
        //----
        // DECLARE INLINE FUNCTION
        var inline_function = function (left, right) {
            if (left.x != right.x)
                return left.x < right.x;
            else if (left.y != right.y)
                return left.y < right.y;
            else
                return left.z < right.z;
        };
        // DO SORT
        std.sort(cubes.begin(), cubes.end(), inline_function);
        // VALIDATION
        if (std.is_sorted(cubes.begin(), cubes.end(), inline_function) == false)
            throw new std.DomainError("Wrong sorting in objects.");
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_union_sets() {
        _Test_includes();
    }
    test.test_union_sets = test_union_sets;
    function _Test_includes() {
        var v1 = new std.Vector([1, 2, 3, 4, 5, 6, 7]);
        var v2 = new std.Vector([2, 3, 4, 5]);
        var v3 = new std.Vector([2, 4, 3, 5]);
        if (std.includes(v1.begin(), v1.end(), v2.begin(), v2.end()) == false)
            throw new std.DomainError("Error on std.includes().");
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_adaptors() {
        // CONSTRUCT ADAPTOR CONATINERS
        var queue = _Construct_adaptor(new std.Queue());
        var stack = _Construct_adaptor(new std.Stack());
        // VALIDATE QUEUE
        var queue_items = [];
        while (queue.empty() == false) {
            queue_items.push(queue.front());
            queue.pop();
        }
        _Validate_adaptor_items(queue_items, [0, 1, 2, 3, 4]);
        // VALIDATE STACK
        var stack_items = [];
        while (stack.empty() == false) {
            stack_items.push(stack.top());
            stack.pop();
        }
        _Validate_adaptor_items(stack_items, queue_items.reverse());
    }
    test.test_adaptors = test_adaptors;
    function _Construct_adaptor(adaptor) {
        for (var i = 0; i < 5; ++i)
            adaptor.push(i);
        return adaptor;
    }
    function _Validate_adaptor_items(items, answer) {
        if (items.length != answer.length)
            throw new std.DomainError("Number of elements are wrong.");
        for (var i = 0; i < items.length; ++i)
            if (items[i] != answer[i])
                throw new std.DomainError("Wrong element is inserted in.");
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_associatives() {
        // SET-CONTAINERS
        _Test_unique_set(new std.HashSet());
        _Test_unique_set(new std.TreeSet());
        _Test_multi_set(new std.HashMultiSet());
        _Test_multi_set(new std.TreeMultiSet());
        // MAP-CONTAINERS
        _Test_unique_map(new std.HashMap());
        _Test_unique_map(new std.TreeMap());
        _Test_multi_map(new std.HashMultiMap());
        _Test_multi_map(new std.TreeMultiMap());
    }
    test.test_associatives = test_associatives;
    /* ---------------------------------------------------------
        SET CONTAINERS
    --------------------------------------------------------- */
    function _Test_unique_set(set) {
        // CONSTRUCT ELEMENTS
        _Construct_set(set);
        // DUPLICATED ?
        if (set.size() != 11)
            throw new std.LengthError("Wrong number of elements.");
        var sum = 0;
        try {
            for (var set_1 = __values(set), set_1_1 = set_1.next(); !set_1_1.done; set_1_1 = set_1.next()) {
                var elem = set_1_1.value;
                // TO VALIDATE
                sum += elem.value;
                // RE-FIND THE ELEMENT BY ITS KEY WITH FIND() FUNCTION.
                var it = set.find(elem);
                if (it.equals(set.end()) == true || it.value.equals(elem) == false)
                    throw new std.OutOfRange("Failed to find the element by find() method.");
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (set_1_1 && !set_1_1.done && (_a = set_1.return)) _a.call(set_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // RE-VALIDATE UNIQUENESS & RIGHT INSERTION
        if (sum != 55)
            throw new std.LogicError("Elements are not fully inserted.");
        var e_2, _a;
    }
    function _Test_multi_set(set) {
        // CONSTRUCT ELEMENTS
        _Construct_set(set);
        // DUPLICATED ?
        if (set.size() != 3 * 11)
            throw new std.LengthError("Wrong number of elements.");
        var sum = 0;
        try {
            for (var set_2 = __values(set), set_2_1 = set_2.next(); !set_2_1.done; set_2_1 = set_2.next()) {
                var elem = set_2_1.value;
                // TO VALIDATE
                sum += elem.value;
                // RE-FIND THE ELEMENT BY ITS KEY WITH FIND() & COUNT() FUNCTION.
                var it = set.find(elem);
                var count = set.count(elem);
                if (it.equals(set.end()) == true || it.value.equals(elem) == false)
                    throw new std.OutOfRange("Failed to find the element by find() method.");
                else if (count != 3)
                    throw new std.LengthError("Wrong number of duplicated items.");
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (set_2_1 && !set_2_1.done && (_a = set_2.return)) _a.call(set_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // RE-VALIDATE DUPLICATION & RIGHT INSERTION
        if (sum != 3 * 55)
            throw new std.LogicError("Elements are not fully inserted.");
        var e_3, _a;
    }
    function _Construct_set(set) {
        // INSERT ELEMENTS
        for (var i = 0; i <= 10; ++i)
            for (var j = 0; j < 3; ++j)
                set.push(new test.Atomic(i));
        // TEST SEQUENCE
        var vec = new std.Vector(set.begin(), set.end());
        if (std.is_sorted(vec.begin(), vec.end()) == false)
            throw new std.LogicError("Elements are not correctly inserted.");
    }
    /* ---------------------------------------------------------
        MAP CONTAINERS
    --------------------------------------------------------- */
    function _Test_unique_map(map) {
        // CONSTRUCT ELEMENTS
        _Construct_map(map);
        // DUPLICATED ?
        if (map.size() != 11)
            throw new std.LengthError("Wrong number of elements.");
        var sum = 0;
        try {
            for (var map_1 = __values(map), map_1_1 = map_1.next(); !map_1_1.done; map_1_1 = map_1.next()) {
                var pair = map_1_1.value;
                // TO VALIDATE
                sum += pair.second;
                // RE-FIND THE ELEMENT BY ITS KEY WITH FIND() FUNCTION.
                var it = map.find(pair.first);
                if (it.equals(map.end()) == true || it.first.equals(pair.first) == false)
                    throw new std.OutOfRange("Failed to find the element by find() method.");
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (map_1_1 && !map_1_1.done && (_a = map_1.return)) _a.call(map_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        // RE-VALIDATE UNIQUENESS & RIGHT INSERTION
        if (sum != 55)
            throw new std.LogicError("Elements are not fully inserted.");
        var e_4, _a;
    }
    function _Test_multi_map(map) {
        // CONSTRUCT ELEMENTS
        _Construct_map(map);
        // DUPLICATED ?
        if (map.size() != 3 * 11)
            throw new std.LengthError("Wrong number of elements.");
        var sum = 0;
        try {
            for (var map_2 = __values(map), map_2_1 = map_2.next(); !map_2_1.done; map_2_1 = map_2.next()) {
                var pair = map_2_1.value;
                // TO VALIDATE
                sum += pair.second;
                // RE-FIND THE ELEMENT BY ITS KEY WITH FIND() & COUNT() FUNCTION.
                var it = map.find(pair.first);
                var count = map.count(pair.first);
                if (it.equals(map.end()) == true || it.first.equals(pair.first) == false)
                    throw new std.OutOfRange("Failed to find the element by find() method.");
                else if (count != 3)
                    throw new std.LengthError("Wrong number of duplicated items.");
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (map_2_1 && !map_2_1.done && (_a = map_2.return)) _a.call(map_2);
            }
            finally { if (e_5) throw e_5.error; }
        }
        // RE-VALIDATE UNIQUENESS & RIGHT INSERTION
        if (sum != 3 * 55)
            throw new std.LogicError("Elements are not fully inserted.");
        var e_5, _a;
    }
    function _Construct_map(map) {
        for (var i = 0; i <= 10; ++i)
            for (var j = 0; j < 3; ++j) {
                var key = new test.Atomic(NUMBER_NAMES[i]);
                var value = i;
                map.push(std.make_pair(key, value));
            }
    }
    var NUMBER_NAMES = [
        "Zero",
        "First", "Second", "Third", "Fourth",
        "Fifth", "Sixth", "Seventh", "Eighth", "Nineth", "Tenth"
    ];
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_for_of_iterations() {
        // LINEAR CONTAINERS
        _Test_for_of_iteration(new std.Vector());
        _Test_for_of_iteration(new std.Deque());
        _Test_for_of_iteration(new std.List());
        // ASSOCIATIVE CONTAINERS
        _Test_for_of_iteration(new std.TreeSet());
        _Test_for_of_map_iteration();
    }
    test.test_for_of_iterations = test_for_of_iterations;
    function _Test_for_of_iteration(vec) {
        //----
        // CONSTRUCTIONS
        //----
        // CONSTRUCT ITEMS TO VALIDATE
        var items = [];
        for (var i_1 = 0; i_1 < 10; ++i_1)
            items.push(i_1);
        // PUSH THEM ALL TO THE CONTAINER
        vec.push.apply(vec, __spread(items));
        //----
        // VALIDATION
        //----
        var i = 0;
        try {
            for (var vec_1 = __values(vec), vec_1_1 = vec_1.next(); !vec_1_1.done; vec_1_1 = vec_1.next()) {
                var elem = vec_1_1.value;
                if (elem != items[i++])
                    throw new std.DomainError("Wrong for of iteration.");
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (vec_1_1 && !vec_1_1.done && (_a = vec_1.return)) _a.call(vec_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        var e_6, _a;
    }
    function _Test_for_of_map_iteration() {
        //----
        // CONSTRUCTIONS
        //----
        // CONSTRUCT ITEMS TO VALIDATE
        var map = new std.TreeMap();
        var items = [];
        for (var i_2 = 0; i_2 < 10; ++i_2)
            items.push(std.make_pair(i_2, i_2));
        // PUSH THEM ALL TO THE CONTAINER
        map.push.apply(map, __spread(items));
        //----
        // VALIDATION
        //----
        var i = 0;
        try {
            for (var map_3 = __values(map), map_3_1 = map_3.next(); !map_3_1.done; map_3_1 = map_3.next()) {
                var pair = map_3_1.value;
                if (std.equal_to(pair, items[i++]) == false)
                    throw new std.DomainError("Wrong for of iteration.");
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (map_3_1 && !map_3_1.done && (_a = map_3.return)) _a.call(map_3);
            }
            finally { if (e_7) throw e_7.error; }
        }
        var e_7, _a;
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_linear_containers() {
        _Test_linear(new std.Vector());
        _Test_linear(new std.Deque());
        _Test_linear(new std.List());
        _Test_linear(std.begin(new Array()).source());
    }
    test.test_linear_containers = test_linear_containers;
    function _Test_linear(vec) {
        //----
        // CONSTRUCT ELEMENTS
        //----
        for (var i = 0; i < 10; i++)
            vec.push_back(i);
        //----
        // ELEMENTS I/O
        //----
        // ERASE AN ELEMENT
        var it = vec.begin().advance(3); // STEP TO 3
        it = vec.erase(it); // AND ERASE THE 3
        if (it.value != 4)
            throw new std.DomainError("It's wrong");
        // INSERT AN ELEMENT
        it = vec.begin().advance(2);
        it = vec.insert(it, -1); // insert -1
        if (it.value != -1)
            throw new std.DomainError("It's wrong");
        // ERASE RANGE
        it = vec.begin().advance(6);
        it = vec.erase(it, it.advance(3)); // erase from 6 to 9
        if (it.value != 9)
            throw new std.DomainError("It's wrong");
        //----
        // FINAL VALIDATION
        //----
        _Validate_linear_elements(vec, [0, 1, -1, 2, 4, 5, 9]);
    }
    function _Validate_linear_elements(vec, answer) {
        if (vec.size() != answer.length)
            throw new std.DomainError("Number of elements are wrong.");
        var i = 0;
        for (var it = vec.begin(); !it.equals(vec.end()); it = it.next())
            if (it.value != answer[i++])
                throw new std.DomainError("Wrong element is inserted in.");
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_lists() {
        _Test_removes();
        _Test_merges();
        _Test_forward_lists();
    }
    test.test_lists = test_lists;
    function _Test_removes() {
        var v = new std.Vector();
        for (var i = 0; i < 10; ++i)
            v.push_back(Math.random());
        _Test_remove(std.List, v);
        _Test_remove(std.ForwardList, v);
    }
    function _Test_remove(creator, v) {
        var l = new creator(v.begin(), v.end());
        l.remove_if(_Remove_if);
        l.reverse();
        std.remove_if(v.begin(), v.end(), _Remove_if);
        if (std.equal(l.begin(), l.end(), v.rbegin()) == false)
            throw new std.DomainError("Error on std." + creator.name + ".remove_if() or its dependency.");
    }
    function _Remove_if(val) {
        return val < 0.5;
    }
    function _Test_merges() {
        //----
        // PRELIMINARIES
        //----
        // SAMPLE DATA
        var v1 = new std.Vector([1, 2, 3, 7, 8, 15, 16]);
        var v2 = new std.Vector([5, 6, 12, 13]);
        // ARE SHUFFLED
        std.shuffle(v1.begin(), v1.end());
        std.shuffle(v2.begin(), v2.end());
        // VALIDATOR; SORTED & MERGED BY TREE-SET
        var set = new std.TreeSet(v1.data());
        set.push.apply(set, __spread(v2.data()));
        //----
        // VALIDATE
        //----
        _Test_merge(std.List, v1, v2, set);
        _Test_merge(std.ForwardList, v1, v2, set);
    }
    function _Test_merge(creator, v1, v2, set) {
        // CONSTRUCT LISTS
        var l1 = new creator(v1.data());
        var l2 = new creator(v2.data());
        // SORT THEM TO MERGE
        l1.sort();
        l2.sort();
        // DO MERGE
        l1.merge(l2);
        // VALIDATE
        if (std.equal(l1.begin(), l1.end(), set.begin()) == false)
            throw new std.DomainError("Error on std." + creator.name + ".merge() or its dependency.");
    }
    function _Test_forward_lists() {
        //----
        // CONSTRUCT ELEMENTS
        //----
        var fl = new std.ForwardList();
        for (var i = 9; i >= 0; --i)
            fl.push_front(i);
        //----
        // ELEMENTS I/O
        //----
        var it = fl.before_begin().advance(3); // STEP TO 2
        it = fl.erase_after(it); // AND ERASE 3 BY ERASE_AFTER()
        if (it.value != 4)
            throw new std.DomainError("Error on std.ForwardList.erase_after(); single deletion.");
        // INSERT AN ELEMENT
        it = fl.before_begin().advance(2);
        it = fl.insert_after(it, -1); // INSERT -1
        if (it.value != -1)
            throw new std.DomainError("Error on std.ForwardList.insert_after().");
        // ERASE RANGE
        it = fl.before_begin().advance(6);
        it = fl.erase_after(it, it.advance(3).next());
        if (it.value != 9)
            throw new std.DomainError("Error on std.ForwardList.erase_after(); range deletion.");
        //----
        // FINAL VALIDATION
        //----
        var answer = new std.Vector([0, 1, -1, 2, 4, 5, 9]);
        if (std.equal(fl.begin(), fl.end(), answer.begin()) == false)
            throw new std.DomainError("Error on std.ForwardList; elements I/O.");
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_swaps() {
        _Test_forward_list_swap();
        //----
        // TEST CONTAINERS
        //----
        // LINEARS
        _Test_container_swap("Vector", new std.Vector(), new std.Vector());
        _Test_container_swap("Deque", new std.Deque(), new std.Deque());
        _Test_container_swap("List", new std.List(), new std.List());
        // ASSOCIATIVES
        _Test_container_swap("HashSet", new std.HashSet(), new std.HashSet());
        _Test_container_swap("HashMap", new std.HashMap(), new std.HashMap());
    }
    test.test_swaps = test_swaps;
    function _Test_container_swap(name, v1, v2) {
        // INSERT ITEMS ON EACH CONTAINERS
        for (var i = 1; i <= 3; ++i) {
            v1.push(std.make_pair(i, i));
            v2.push(std.make_pair(i + 3, i + 3));
        }
        // SWAP THEM
        v1.swap(v2);
        // VALIDATE CONTENTS
        var sum = 0;
        try {
            for (var v1_1 = __values(v1), v1_1_1 = v1_1.next(); !v1_1_1.done; v1_1_1 = v1_1.next()) {
                var pair = v1_1_1.value;
                sum += pair.first;
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (v1_1_1 && !v1_1_1.done && (_a = v1_1.return)) _a.call(v1_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        if (sum != 4 + 5 + 6)
            throw new std.DomainError("Error on std." + name + ".swap(); contents.");
        else if (v1.begin().source() != v1)
            throw new std.DomainError("Error on std." + name + ".swap(); source.");
        // VALIDATE NEW ITEMS
        v1.push(std.make_pair(7, 7));
        v1.clear();
        if (v1.end().prev().source() != v1)
            throw new std.DomainError("Error on  std." + name + ".swap(); source of newly inserted item.");
        var e_8, _a;
    }
    function _Test_forward_list_swap() {
        var fl1 = new std.ForwardList();
        var fl2 = new std.ForwardList();
        fl1.push_front(1);
        fl2.push_front(2);
        fl1.swap(fl2);
        var first = fl2.begin();
        fl2.push_front(-1);
        var last = fl2.begin();
        if (first.value != 1 || first.source() != fl2 || last.source() != fl2)
            throw new std.DomainError("Error on ForwardList.swap().");
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_trees() {
        _Test_tree_set(new std.TreeSet());
        _Test_tree_set(new std.TreeMultiSet());
        _Test_tree_map(new std.TreeMap());
        _Test_tree_map(new std.TreeMultiMap());
        _Test_bounds();
    }
    test.test_trees = test_trees;
    function _Test_tree_set(set) {
        for (var i = 0; i < 1000; ++i)
            set.insert(Math.floor(Math.random() * 100));
        // VALIDATE SORTING
        if (std.is_sorted(set.begin(), set.end()) == false)
            throw new std.DomainError("Order of TreeSet or TreeMultiSet is wrong.");
        // VALIDATE FIND
        for (var i = 0; i < 10000; ++i) {
            var val = Math.floor(Math.random() * 100);
            var alg_it = std.find(set.begin(), set.end(), val);
            var set_it = set.find(val);
            if (alg_it == set.end())
                if (set_it == set.end())
                    continue;
                else
                    throw new std.DomainError("find() of TreeSet or TreeMultiSet is wrong; invalid out of range.");
            else if (alg_it.value != set_it.value)
                throw new std.DomainError("find() of TreeSet or TreeMultiSet is wrong; different value.");
        }
    }
    function _Test_tree_map(map) {
        for (var i = 0; i < 1000; ++i)
            map.emplace(Math.floor(Math.random() * 100), 0);
        // VALIDATE SORTING
        if (std.is_sorted(map.begin(), map.end()) == false)
            throw new std.DomainError("Order of TreeMap or TreeMultiMap is wrong.");
        var _loop_1 = function (i) {
            var val = Math.floor(Math.random() * 100);
            var alg_it = std.find_if(map.begin(), map.end(), function (entry) {
                return val == entry.first;
            });
            var set_it = map.find(val);
            if (alg_it == map.end())
                if (set_it == map.end())
                    return "continue";
                else
                    throw new std.DomainError("find() of TreeMap or TreeMultiMap is wrong; invalid out of range.");
            else if (alg_it.first != set_it.first)
                throw new std.DomainError("find() of TreeMap or TreeMultiMap is wrong; different value.");
        };
        // VALIDATE FIND
        for (var i = 0; i < 10000; ++i) {
            _loop_1(i);
        }
    }
    function _Test_bounds() {
        // test tree container and algorithms' binary search at the same time
        test.test_binary_searches();
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    function test_utilities() {
        _Test_pairs();
        _Test_entries();
    }
    test.test_utilities = test_utilities;
    function _Test_pairs() {
        var x = std.make_pair(1, 2);
        var y = std.make_pair(1, 2);
        var z = std.make_pair(1, 3);
        if (x.hashCode() != y.hashCode() || x.hashCode() == z.hashCode())
            throw new std.DomainError("Error in Pair.hashCode()");
        else if (x.equals(y) == false || x.equals(z) == true)
            throw new std.DomainError("Error in Pair.equals()");
    }
    function _Test_entries() {
        var x = new std.Entry(1, 2);
        var y = new std.Entry(1, 3);
        if (x.hashCode() != y.hashCode())
            throw new std.DomainError("Error in Entry.hashCode()");
        else if (x.equals(y) == false)
            throw new std.DomainError("Error in Pair.equals()");
    }
})(test || (test = {}));
/// <reference path="../../API.ts" />
var test;
(function (test) {
    function test_bind() {
        var list = new std.List();
        // <List>???.insert(...)
        // list.insert(list.end(), 5, 1)
        var fn = std.bind(std.List.prototype.insert);
        fn(list, list.end(), 5, 1);
        var fn2 = std.bind(std.List.prototype.clear);
        fn2(list);
        // <List>???.insert(_1, _2, 5, _3)
        // list.insert(list.end(), 5, 2)
        var fn3 = std.bind(list.insert, std.placeholders._1, std.placeholders._2, 5, std.placeholders._3);
        fn3(list, list.end(), 2);
    }
    test.test_bind = test_bind;
})(test || (test = {}));
/// <reference path="../../API.ts" />
var test;
(function (test) {
    function test_comparisons() {
        var atoms = new std.Vector();
        for (var i = 0; i < 10; ++i)
            for (var j = 0; j < 3; ++j)
                atoms.push(new test.Atomic(i));
        try {
            for (var atoms_1 = __values(atoms), atoms_1_1 = atoms_1.next(); !atoms_1_1.done; atoms_1_1 = atoms_1.next()) {
                var x = atoms_1_1.value;
                try {
                    for (var atoms_2 = __values(atoms), atoms_2_1 = atoms_2.next(); !atoms_2_1.done; atoms_2_1 = atoms_2.next()) {
                        var y = atoms_2_1.value;
                        _Test_comparison_results(x, y, x.value == y.value, std.equal_to);
                        _Test_comparison_results(x, y, x.value != y.value, std.not_equal_to);
                        _Test_comparison_results(x, y, x.value < y.value, std.less);
                        _Test_comparison_results(x, y, x.value > y.value, std.greater);
                        _Test_comparison_results(x, y, x.value <= y.value, std.less_equal);
                        _Test_comparison_results(x, y, x.value >= y.value, std.greater_equal);
                    }
                }
                catch (e_9_1) { e_9 = { error: e_9_1 }; }
                finally {
                    try {
                        if (atoms_2_1 && !atoms_2_1.done && (_a = atoms_2.return)) _a.call(atoms_2);
                    }
                    finally { if (e_9) throw e_9.error; }
                }
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (atoms_1_1 && !atoms_1_1.done && (_b = atoms_1.return)) _b.call(atoms_1);
            }
            finally { if (e_10) throw e_10.error; }
        }
        var e_10, _b, e_9, _a;
    }
    test.test_comparisons = test_comparisons;
    function _Test_comparison_results(x, y, bit, func) {
        if (bit != func(x, y))
            throw new std.DomainError("Invalid comparison.");
    }
})(test || (test = {}));
/// <reference path="../../API.ts" />
var test;
(function (test) {
    var SLEEP_TIME = 100;
    var WAIT_COUNT = 10;
    function test_condition_variables() {
        return __awaiter(this, void 0, void 0, function () {
            var cv, wait_count, i, success_count, start_time, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cv = new std.ConditionVariable();
                        wait_count = 0;
                        //----
                        // WAIT & NOTIFY
                        //----
                        // THERE'RE 10 WAITERS; HOLDERS
                        for (i = 0; i < WAIT_COUNT; ++i) {
                            cv.wait().then(function () {
                                --wait_count;
                            });
                            ++wait_count;
                        }
                        // NOTIFY ONE
                        cv.notify_one();
                        return [4 /*yield*/, std.sleep_for(SLEEP_TIME)];
                    case 1:
                        _a.sent();
                        if (wait_count != WAIT_COUNT - 1)
                            throw new std.DomainError("Error on ConditionVariable::notify_one.");
                        // NOTIFY ALL
                        cv.notify_all();
                        return [4 /*yield*/, std.sleep_for(SLEEP_TIME)];
                    case 2:
                        _a.sent();
                        if (wait_count != 0)
                            throw new std.DomainError("Error on ConditionVariable::notify_all.");
                        success_count = 0;
                        start_time = new Date().getTime();
                        // THERE'RE 10 WAITERS, HOLDERS, WITH DIFFERENT TIMES
                        for (i = 0; i < WAIT_COUNT; ++i) {
                            cv.wait_for(i * SLEEP_TIME).then(function (ret) {
                                if (ret == true)
                                    ++success_count;
                            });
                        }
                        // NOTIFY ONE
                        cv.notify_one();
                        // NOTIFY ALL WHEN BE HALT TIME
                        return [4 /*yield*/, std.sleep_for(5 * SLEEP_TIME)];
                    case 3:
                        // NOTIFY ALL WHEN BE HALT TIME
                        _a.sent();
                        cv.notify_all();
                        // VALIDATE SUCCESS COUNT
                        return [4 /*yield*/, std.sleep_for(SLEEP_TIME)];
                    case 4:
                        // VALIDATE SUCCESS COUNT
                        _a.sent();
                        if (success_count < 3 || success_count > 7)
                            throw new std.DomainError("ConditionVariable::wait_for does not work in exact time.");
                        return [2 /*return*/];
                }
            });
        });
    }
    test.test_condition_variables = test_condition_variables;
})(test || (test = {}));
/// <reference path="../../API.ts" />
var test;
(function (test) {
    var SLEEP_TIME = 50;
    var READ_COUNT = 10;
    function test_mutexes() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _Test_lock("Mutex", new std.Mutex())];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, _Test_try_lock("TimedMutex", new std.TimedMutex())];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, _Test_lock_shared("SharedMutex", new std.SharedMutex())];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, _Test_try_lock_shared("SharedTimedMutex", new std.SharedTimedMutex())];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    test.test_mutexes = test_mutexes;
    /* ---------------------------------------------------------
        WRITE LOCK
    --------------------------------------------------------- */
    function _Test_lock(name, mtx) {
        return __awaiter(this, void 0, void 0, function () {
            var start_time, elapsed_time;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        start_time = new Date().getTime();
                        // LOCK FOR A SECOND
                        mtx.lock();
                        std.sleep_for(SLEEP_TIME).then(function () {
                            mtx.unlock();
                        });
                        // TRY LOCK AGAIN
                        return [4 /*yield*/, mtx.lock()];
                    case 1:
                        // TRY LOCK AGAIN
                        _a.sent();
                        elapsed_time = new Date().getTime() - start_time;
                        return [4 /*yield*/, mtx.unlock()];
                    case 2:
                        _a.sent();
                        if (elapsed_time < SLEEP_TIME * .95)
                            throw new std.DomainError(name + " does not work.");
                        return [2 /*return*/];
                }
            });
        });
    }
    test._Test_lock = _Test_lock;
    function _Test_try_lock(name, mtx) {
        return __awaiter(this, void 0, void 0, function () {
            var start_time, ret, elapsed_time;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _Test_lock(name, mtx)];
                    case 1:
                        _a.sent();
                        start_time = new Date().getTime();
                        return [4 /*yield*/, mtx.try_lock_for(SLEEP_TIME)];
                    case 2:
                        ret = _a.sent();
                        if (ret == false)
                            throw new std.DomainError(name + "::try_lock_for does not return exact value.");
                        return [4 /*yield*/, mtx.try_lock_for(SLEEP_TIME)];
                    case 3:
                        // TRY LOCK AGAIN
                        ret = _a.sent();
                        elapsed_time = new Date().getTime() - start_time;
                        if (ret == true)
                            throw new std.DomainError(name + "::try_lock_for does not return exact value.");
                        else if (elapsed_time < SLEEP_TIME * .95)
                            throw new std.DomainError(name + " does not work in exact time.");
                        return [4 /*yield*/, mtx.unlock()];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    test._Test_try_lock = _Test_try_lock;
    /* ---------------------------------------------------------
        READ LOCK
    --------------------------------------------------------- */
    function _Test_lock_shared(name, mtx) {
        return __awaiter(this, void 0, void 0, function () {
            var read_count, i, start_time, elapsed_time, i, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // TEST WRITING LOCK & UNLOCK
                    return [4 /*yield*/, _Test_lock(name, mtx)];
                    case 1:
                        // TEST WRITING LOCK & UNLOCK
                        _a.sent();
                        read_count = 0;
                        for (i = 0; i < READ_COUNT; ++i) {
                            mtx.lock_shared();
                            ++read_count;
                        }
                        if (read_count != READ_COUNT)
                            throw new std.DomainError(name + "::lock_shared does not support simultaneous lock.");
                        start_time = new Date().getTime();
                        std.sleep_for(SLEEP_TIME).then(function () {
                            // SLEEP FOR A SECOND AND UNLOCK ALL READINGS
                            for (var i = 0; i < READ_COUNT; ++i)
                                mtx.unlock_shared();
                        });
                        // DO WRITE LOCK; MUST BE BLOCKED
                        return [4 /*yield*/, mtx.lock()];
                    case 2:
                        // DO WRITE LOCK; MUST BE BLOCKED
                        _a.sent();
                        elapsed_time = new Date().getTime() - start_time;
                        if (elapsed_time < SLEEP_TIME * .95)
                            throw new std.DomainError(name + " does not block writing until reading.");
                        //----
                        // WRITE FIRST, READ LATER
                        //----
                        start_time = new Date().getTime();
                        std.sleep_for(SLEEP_TIME).then(function () {
                            // SLEEP FOR A SECOND AND UNLOCK WRITINGS
                            mtx.unlock();
                        });
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < READ_COUNT)) return [3 /*break*/, 6];
                        return [4 /*yield*/, mtx.lock_shared()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        ++i;
                        return [3 /*break*/, 3];
                    case 6:
                        // VALIDATE ELAPSED TIME
                        elapsed_time = new Date().getTime() - start_time;
                        if (elapsed_time < SLEEP_TIME * .95)
                            throw new std.DomainError(name + " does not block reading until writing.");
                        i = 0;
                        _a.label = 7;
                    case 7:
                        if (!(i < READ_COUNT)) return [3 /*break*/, 10];
                        return [4 /*yield*/, mtx.unlock_shared()];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        ++i;
                        return [3 /*break*/, 7];
                    case 10: return [2 /*return*/];
                }
            });
        });
    }
    function _Test_try_lock_shared(name, mtx) {
        return __awaiter(this, void 0, void 0, function () {
            var start_time, elapsed_time, flag, i, i, i, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // TEST WRITING LOCK & UNLOCK
                    return [4 /*yield*/, _Test_try_lock(name, mtx)];
                    case 1:
                        // TEST WRITING LOCK & UNLOCK
                        _a.sent();
                        return [4 /*yield*/, _Test_lock_shared(name, mtx)];
                    case 2:
                        _a.sent();
                        //----
                        // READ SIMULTANEOUSLY
                        //----
                        start_time = new Date().getTime();
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < READ_COUNT)) return [3 /*break*/, 6];
                        return [4 /*yield*/, mtx.try_lock_shared_for(SLEEP_TIME)];
                    case 4:
                        flag = _a.sent();
                        if (flag == false)
                            throw new std.DomainError(name + "::try_lock_shared_for does not return exact value.");
                        _a.label = 5;
                    case 5:
                        ++i;
                        return [3 /*break*/, 3];
                    case 6:
                        // VALIDATE ELAPSED TIME
                        elapsed_time = new Date().getTime() - start_time;
                        if (elapsed_time >= SLEEP_TIME)
                            throw new std.DomainError(name + "::try_lock_shared_for does not support simultaneous lock.");
                        //----
                        // WRITE LOCK
                        //----
                        // TRY WRITE LOCK ON READING
                        start_time = new Date().getTime();
                        return [4 /*yield*/, mtx.try_lock_for(SLEEP_TIME)];
                    case 7:
                        flag = _a.sent();
                        elapsed_time = new Date().getTime() - start_time;
                        if (flag == true)
                            throw new std.DomainError(name + "::try_lock_for does not return exact value on reading.");
                        else if (elapsed_time < SLEEP_TIME * .95)
                            throw new std.DomainError(name + "::try_lock_for does not block on reading.");
                        // TRY WRITE LOCK AFTER READING
                        std.sleep_for(SLEEP_TIME).then(function () {
                            for (var i = 0; i < READ_COUNT; ++i)
                                mtx.unlock_shared();
                        });
                        start_time = new Date().getTime();
                        return [4 /*yield*/, mtx.try_lock_for(SLEEP_TIME)];
                    case 8:
                        flag = _a.sent();
                        elapsed_time = new Date().getTime() - start_time;
                        if (flag == false)
                            throw new std.DomainError(name + "::try_lock_for does not return exact value on reading.");
                        else if (elapsed_time < SLEEP_TIME * .95)
                            throw new std.DomainError(name + "::try_lock_for does not work in exact time.");
                        //----
                        // READ LOCK
                        //----
                        // READ LOCK ON WRITING
                        start_time = new Date().getTime();
                        i = 0;
                        _a.label = 9;
                    case 9:
                        if (!(i < READ_COUNT)) return [3 /*break*/, 12];
                        return [4 /*yield*/, mtx.try_lock_shared_for(SLEEP_TIME)];
                    case 10:
                        flag = _a.sent();
                        if (flag == true)
                            throw new std.DomainError(name + "::try_lock_shared_for does not return exact value on writing.");
                        _a.label = 11;
                    case 11:
                        ++i;
                        return [3 /*break*/, 9];
                    case 12:
                        elapsed_time = new Date().getTime() - start_time;
                        if (elapsed_time < SLEEP_TIME * READ_COUNT * .95)
                            return [2 /*return*/, new std.DomainError(name + "::try_lock_shared_for does not work in exact time.")];
                        // READ LOCK AFTER WRITING
                        start_time = new Date().getTime();
                        std.sleep_for(SLEEP_TIME).then(function () {
                            mtx.unlock();
                        });
                        i = 0;
                        _a.label = 13;
                    case 13:
                        if (!(i < READ_COUNT)) return [3 /*break*/, 16];
                        return [4 /*yield*/, mtx.try_lock_shared_for(SLEEP_TIME)];
                    case 14:
                        flag = _a.sent();
                        if (flag == false)
                            throw new std.DomainError(name + "::try_lock_shared_for does not return exact value after writing.");
                        _a.label = 15;
                    case 15:
                        ++i;
                        return [3 /*break*/, 13];
                    case 16:
                        elapsed_time = new Date().getTime() - start_time;
                        if (elapsed_time < SLEEP_TIME * .95 || elapsed_time >= SLEEP_TIME * 5.0)
                            throw new std.DomainError("::try_lock_shared_for does not work in exact time.");
                        i = 0;
                        _a.label = 17;
                    case 17:
                        if (!(i < READ_COUNT)) return [3 /*break*/, 20];
                        return [4 /*yield*/, mtx.unlock_shared()];
                    case 18:
                        _a.sent();
                        _a.label = 19;
                    case 19:
                        ++i;
                        return [3 /*break*/, 17];
                    case 20: return [2 /*return*/];
                }
            });
        });
    }
})(test || (test = {}));
/// <reference path="../../API.ts" />
/// <reference path="mutexes.ts" />
var test;
(function (test) {
    var SIZE = 4;
    function test_semaphores() {
        return __awaiter(this, void 0, void 0, function () {
            var s, ts;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, test._Test_lock("Semaphore", new std.experiments.Semaphore(1))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, test._Test_try_lock("TimedSemaphore", new std.experiments.TimedSemaphore(1))];
                    case 2:
                        _a.sent();
                        s = new std.experiments.Semaphore(SIZE);
                        ts = new std.experiments.TimedSemaphore(SIZE);
                        return [4 /*yield*/, _Test_semaphore("Semaphore", s)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, _Test_timed_semaphore(ts)];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    test.test_semaphores = test_semaphores;
    function _Test_semaphore(name, s) {
        return __awaiter(this, void 0, void 0, function () {
            var acquired_count, i, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        acquired_count = 0;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < SIZE)) return [3 /*break*/, 4];
                        return [4 /*yield*/, s.lock()];
                    case 2:
                        _a.sent();
                        ++acquired_count;
                        _a.label = 3;
                    case 3:
                        ++i;
                        return [3 /*break*/, 1];
                    case 4:
                        if (acquired_count != SIZE)
                            throw new std.DomainError("Error on " + name + ".lock().");
                        else if (s.try_lock() == true)
                            throw new std.DomainError("Error on " + name + ".try_lock().");
                        // LOCK 4 TIMES AGAIN -> THEY SHOULD BE HOLD
                        for (i = 0; i < SIZE; ++i)
                            s.lock().then(function () {
                                ++acquired_count;
                            });
                        if (acquired_count != SIZE)
                            throw new std.DomainError("Error on " + name + ".lock() when " + name + " is full.");
                        // DO UNLOCK
                        return [4 /*yield*/, s.unlock(SIZE)];
                    case 5:
                        // DO UNLOCK
                        _a.sent();
                        if (acquired_count != 2 * SIZE)
                            throw new std.DomainError("Error on " + name + ".unlock().");
                        return [2 /*return*/];
                }
            });
        });
    }
    function _Test_timed_semaphore(ts) {
        return __awaiter(this, void 0, void 0, function () {
            var name, flag, cnt, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        name = "TimedSemaphore";
                        return [4 /*yield*/, ts.try_lock_for(0, SIZE / 2)];
                    case 1:
                        flag = _a.sent();
                        if (flag == false)
                            throw new std.DomainError("Error on TimedSemaphore.try_lock_for(); failed to lock when clear.");
                        // TRY LOCK FOR -> MUST BE FAILED
                        ts.try_lock_for(50, SIZE).then(function (ret) {
                            if (ret == true)
                                throw new std.DomainError("Error on TimedSemaphore.try_lock_for(); succeeded to lock when must be failed.");
                        });
                        cnt = 0;
                        for (i = 0; i < SIZE / 2; ++i) {
                            ts.lock().then(function () {
                                ++cnt;
                            });
                        }
                        return [4 /*yield*/, std.sleep_for(100)];
                    case 2:
                        _a.sent();
                        if (cnt != SIZE / 2)
                            throw new std.DomainError("Error on TimedSemaphore.try_lock_for(); failed to release holdings.");
                        // RELEASE AND LOCK
                        return [4 /*yield*/, ts.unlock(SIZE)];
                    case 3:
                        // RELEASE AND LOCK
                        _a.sent();
                        return [4 /*yield*/, ts.try_lock_for(100, 4)];
                    case 4:
                        flag = _a.sent();
                        if (flag == false)
                            throw new std.DomainError("Error on TimedSemaphore.try_lock_for(); failed to lock when released.");
                        return [4 /*yield*/, ts.unlock(SIZE)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
})(test || (test = {}));
/// <reference path="../../API.ts" />
var test;
(function (test) {
    function test_sleeps() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _Test_sleep_for()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, _Test_sleep_until()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    test.test_sleeps = test_sleeps;
    function _Test_sleep_for() {
        return __awaiter(this, void 0, void 0, function () {
            var t1, t2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        t1 = new Date();
                        return [4 /*yield*/, std.sleep_for(500)];
                    case 1:
                        _a.sent();
                        t2 = new Date();
                        // VALIDATE THE SLEEP_FOR
                        _Validate_sleep(t1, t2);
                        return [2 /*return*/];
                }
            });
        });
    }
    function _Test_sleep_until() {
        return __awaiter(this, void 0, void 0, function () {
            var t1, t2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        t1 = new Date();
                        return [4 /*yield*/, std.sleep_until(new Date(t1.getTime() + 500))];
                    case 1:
                        _a.sent();
                        t2 = new Date();
                        // VAIDATE THE SLEEP_UNTIL
                        _Validate_sleep(t1, t2);
                        return [2 /*return*/];
                }
            });
        });
    }
    function _Validate_sleep(t1, t2) {
        var ms = t2.getTime() - t1.getTime();
        if (ms < 500 - 100 || ms >= 500 + 100)
            throw new std.DomainError("sleep is wrong: " + ms);
    }
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    var Atomic = /** @class */ (function () {
        function Atomic(value) {
            this.value = value;
        }
        Atomic.prototype.equals = function (obj) {
            return std.equal_to(this.value, obj.value);
        };
        Atomic.prototype.less = function (obj) {
            return std.less(this.value, obj.value);
        };
        Atomic.prototype.hashCode = function () {
            return std.hash(this.value);
        };
        return Atomic;
    }());
    test.Atomic = Atomic;
})(test || (test = {}));
/// <reference path="../API.ts" />
var test;
(function (test) {
    var Cube = /** @class */ (function () {
        function Cube(width, height, length, x, y, z) {
            if (width === void 0) { width = Math.random() * 10; }
            if (height === void 0) { height = Math.random() * 10; }
            if (length === void 0) { length = Math.random() * 10; }
            if (x === void 0) { x = Math.random() * 100; }
            if (y === void 0) { y = Math.random() * 100; }
            if (z === void 0) { z = Math.random() * 100; }
            this.width = width;
            this.height = height;
            this.length = this.length;
            this.x = x;
            this.y = y;
            this.z = z;
        }
        Object.defineProperty(Cube.prototype, "volume", {
            get: function () {
                return this.width * this.height * this.length;
            },
            enumerable: true,
            configurable: true
        });
        return Cube;
    }());
    test.Cube = Cube;
    (function (Cube) {
        function compare_volume(x, y) {
            return x.volume < y.volume;
        }
        Cube.compare_volume = compare_volume;
        function compare_position(left, right) {
            if (left.x != right.x)
                return left.x < right.x;
            else if (left.y != right.y)
                return left.y < right.y;
            else
                return left.z < right.z;
        }
        Cube.compare_position = compare_position;
    })(Cube = test.Cube || (test.Cube = {}));
})(test || (test = {}));
//# sourceMappingURL=test.js.map